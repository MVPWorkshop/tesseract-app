@use "sass:math";
@import "variables";

@function pxToRem($value){
  @return $value / $defaultFontSize + rem
}

// h1XlSize / scale^(hSize - offset); Minor third scale dependant on breakpoints
@function headerFontSize($headerSize, $breakPoint) {
  $offset: map-get($offsetByBreakpoint, $breakPoint);
  $scale: math.pow($headerScale, $headerSize + $offset);

  @return $h1XlSize / $scale + px;
}

@mixin removeButtonDefaultStyles {
  border: none;
  background: none;
  outline: none;
}

@mixin textMain {
  font-size: pxToRem(21px);
  line-height: pxToRem(24px);
  color: map-get($colors, 'white');

  .type-small {
    font-size: pxToRem(18px);
  }
}

@mixin textBody {
  font-size: pxToRem(19.2px);
  line-height: pxToRem(24px);
  color: map-get($colors, 'blueBell');

  &:global(.type-small) {
    font-size: pxToRem(16px);
  }
}

@mixin btnNormal($btnColor) {
  @include button-variant(transparentize($btnColor, 0.8), $btnColor);

  border-color: $btnColor;
  color: $btnColor !important;

  &:hover {
    background-color: transparentize($btnColor, 0.55);
  }
}

@mixin sm {
  @media (min-width: #{$screen-sm-min}) {
    @content;
  }
}

@mixin md {
  @media (min-width: #{$screen-md-min}) {
    @content;
  }
}

@mixin lg {
  @media (min-width: #{$screen-lg-min}) {
    @content;
  }
}

@mixin xl {
  @media (min-width: #{$screen-xl-min}) {
    @content;
  }
}

@mixin headerFontSize($headerSize) {
  font-size: headerFontSize($headerSize, $screen-xs-min);

  @include sm() {
    font-size: headerFontSize($headerSize, $screen-sm-min);
  }

  @include md() {
    font-size: headerFontSize($headerSize, $screen-md-min);
  }

  @include lg() {
    font-size: headerFontSize($headerSize, $screen-lg-min);
  }

  @include xl() {
    font-size: headerFontSize($headerSize, $screen-xl-min);
  }
}
